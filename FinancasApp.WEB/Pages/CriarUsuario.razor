@* Mapeamento da rota de navegação *@
@page "/app/criar-usuario"

@using FinancasApp.WEB.Models

<div class="card m-4">
    <div class="card-body">

        <h2>Criação de usuários</h2>
        <p>Preencha os campos para criar sua conta de usuário.</p>

        @*Exibir mensagem de suceso*@
        @if(!string.IsNullOrEmpty(mensagemSucesso))
        {
            <div class="alert alert-success">
                <strong>@mensagemSucesso</strong>
            </div>
        }else if (!string.IsNullOrEmpty(mensagemErro))
        {
            <div class="alert alert-danger">
                <strong>@mensagemErro</strong>
            </div>
        }

        @*Formulário de autenticação*@
        <EditForm Model="@model" OnValidSubmit="@OnSubmit">

            @*Ativar as validações dos campos*@
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label>Nome do usuário:</label>
                <InputText class="form-control" @bind-Value="model.Nome" />
                <div class="text-danger">
                    <ValidationMessage For="@(() => model.Nome)" />
                </div>
            </div>

            <div class="mb-3">
                <label>Email de acesso:</label>
                <InputText class="form-control" @bind-Value="model.Email" />
                <div class="text-danger">
                    <ValidationMessage For="@(() => model.Email)" />
                </div>
            </div>

            <div class="mb-3">
                <label>Senha de acesso:</label>
                <InputText class="form-control" type="password" @bind-Value="model.Senha" />
                <div class="text-danger">
                    <ValidationMessage For="@(() => model.Senha)" />
                </div>
            </div>

            <div class="mb-3">
                <label>Confirme a sua senha:</label>
                <InputText class="form-control" type="password" @bind-Value="model.SenhaConfirmacao" />
                <div class="text-danger">
                    <ValidationMessage For="@(() => model.SenhaConfirmacao)" />
                </div>
            </div>

            <div class="m-3">
                <input type="submit" class="btn btn-success" value="Acessar Sistema" />
            </div>

        </EditForm>
    </div>
</div>

@inject HttpClient Http

@code {
    //declarar um objeto da classe de modelo de dados
    private CriarUsuarioModel model = new CriarUsuarioModel();

    //atributos
    private string? mensagemSucesso;
    private string? mensagemErro;

    //função executada pelo botão SUBMIT do formulário
    protected async Task OnSubmit()
    {
        //limpando as mensagens
        mensagemSucesso = string.Empty;
        mensagemErro = string.Empty;

        //executar o serviço de cadastro de usuário da API
        var result = await Http.PostAsJsonAsync("api/usuarios/criar", model);

        //verificando se a API retornou sucesso..

        if(result.IsSuccessStatusCode)
        {
            mensagemSucesso = "Parabéns, sua conta foi criada com sucesso.";
            model = new CriarUsuarioModel();
        }
        else
        {
            //ler a resposta de erro retornada pela API
            var response = await result.Content.ReadFromJsonAsync<ErrorModel>();
            mensagemErro = response.Message;
        }

    }
}